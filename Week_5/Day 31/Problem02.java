import java.util.ArrayList;

public class Problem02 {

    /*
     * 
     * 
     * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed n, find the sum of the even-valued terms.


fiboEvenSum(10) should return 10.
Waiting: fiboEvenSum(34) should return 44.
Waiting: fiboEvenSum(60) should return 44.
Waiting: fiboEvenSum(1000) should return 798.
Waiting: fiboEvenSum(100000) should return 60696.
Waiting: fiboEvenSum(4000000) should return 4613732.
     */
    public static void main(String[] args) {
        int n = 1000;
        ArrayList<Integer> list = fibo(n);
        fiboEvenSum(list);
    }

    private static void fiboEvenSum(ArrayList<Integer> list) {
        int sum = 0;
        for (Integer integer : list) {
            if (integer % 2 == 0) {
                sum += integer;
            }
        }
        System.out.println(sum);
    }

    private static ArrayList<Integer> fibo(int n) {
        ArrayList<Integer> list = new ArrayList<>();

        int a = 0;
        int b = 1;
        int c;

        while (b <= n) {
            list.add(b);
            c = a + b;
            a = b;
            b = c;
        }
        return list;
    }
}
